Day - 1: Git 
On the first Day I forgot to save the original diary
>Basic Introduction
>Basic Tutorial to Web Devleopment Terms

>Git Tutorial
    >how git is great (and I know that :>)
    >basic git commands
        >pull down remote repository
            >git clone "url"
        >workflow commands
            >git add "file name.ext"
            >git commit -m "commitement message"
        >status commands
            >git status
            >git log
    >git command layout
        program | action | destination
>Git Tutorial on https://www.youtube.com/watch?v=HVsySz-h9r4
    >distributed vs. central control systems (git is VCS)
    >git help command
    >getting started
        >an existing local project
            > use command "git init"
            > use "git status" to see tracked folders
            > use "git add" to track files
                > create a .gitignore file and put in it untrackable file (like personal or preference files)
            > use "git commit -m" to save the progress to a git version
                > "git commit -m 'here you put a message specifiying the changes'"
            > use "git log"
                > display log of commits
        >an existing remote project
            > use "git clone <url> ."
                > you might even clone a local repository
                > the "dot" in the end of the command means clone all files to current directory
            > view information of cloned remote repository
                > use "git remote -v"
                    > it list information to repository, including location and pushing url
                > use "git branch -a"
                    > it will list all branches locally and remotly
                > push the changes
                    > commit locally
                    > pull remotly "git pull origin master"
                        > to avoid overwriting others code 
                    > push remotly "git push origing master"
        >git stages  
            > working directory
                > Untracked and modified files
            > Staging Area
                > organize files to be commited
            > .git directory
                > the directory carrying files of a specific version
        > common workflow
            > create a branch for the desired feature
                > "git branch <name>"
                > "git branch" list the branches
                > "git checkout <branch name>"
                > "git push -u origin <branch name>" pusht the branch to the repository
                > How to merge a branch
                    > "git checkout master" switch to master branch
                    > "git pull origin master" just to avoid overwriting
                    > "git branch --merged" see merged branches
                    > "git merge <branch name>" the real merging
                    > "git branch --merged" to check if things are merged or network
                > Delete a branch
                    > "git branch -d <branch name>" delete a branch"
                    > "git push <name of remote repository> --delete <branch name>" from remote

        > version control branch
            > a branch is a copy of the original code to try to implement a feature without messing up with others workflow, or without commiting to much

Started at ~1:30
-linux is pain, I just started and spent half my session on solving unnecessary problems, use windows folks, use windows ~2:00
-I feel excited to work at company using local network, It looks cool ~3:20
-this have taken far too long 4:35
-so here I almost done my tutorial for today 5:10
-I almost deleted this diary but GIT saved the day 5:33
=============================================================================================
Day 2 - Ruby First Day
> First I will create a git branch to avoid multiple commits
> Ok dozens of trouble
> Ruby & Python are similiar (great to me)
> The most important feature of ruby is "on rails" framework
> https://launchschool.com/books/ruby/read/introduction 
    > History
    > Abstration idea
    
    > Ruby Installation

- I feel excited for this course it seems great 2:41PM
- I messed with a lot of things, and now Odin project tells me to not do anythings, well but you told me to follow those other guides 3:30PM
- Here I am done 3:36PM
=============================================================================================
Day 3 - Ruby Day Two
> General non-useful arithmatics :)
> ruby symbol
    > ":my_symbol"
> nil
    > the same as null
> variables are as Python
    > constants are defined by all-captilized letters
    > global are precseded by $ sign
    > class variables are precseded by @@ signs
    > instance variable declaration are preseded by @ sign
    > local variable is defined by name only
> in ruby, when a variable is assigned to another, it will get a pointer to it, not just a copy
    > here: "name1=name2" name1 will hold name2 not only a copy of data at moment of assigning
> taking input:
    gets.chomp
> scope of variables 
    > local defined between {} or do/end
    > global defined away form {} or do/end

> output
    > "print" displays output with "\n"
    > "puts" as "print" wihtout "\n"

> input
    > "gets", returns the inputed string with "\n"
    > "gets.chomp", returns the input without the "\n"
    > tutorials point webpage "https://www.tutorialspoint.com/ruby/ruby_input_output.htm"
        > "The class IO provides all the basic methods, such as read, write, gets, puts, readline, getc, and printf"
            > "puts" simple output with auto newline
            > "gets" a function returning user input including newline character
            > "putc" instead of put-sting it will put-character
            > "getc" similar to getc but takes one character only
            > "print" similar to puts, but discardes the newline character

            > there is some file opening and closing, but I am not interested yet

> if condition
    > similar to python, ended with "end" command word
    > in ruby a single statement can be conditioned with "if" placed after it 
    > "elsif" & "elese"
    > "unless" command word
        > it is a not if, easy
> Case statement
    > look at this code
    {
        grade = 'F'

        did_i_pass = case grade
            when 'A' then "hell yeah!"
            when 'D' then "also hell yeah!"
            else "McDonald's is hiring!
        end
    }
    > here the text after "then" is assigned to "did_I_pass"
    > or a more classical approach is 
    {
        grade = 'F'

        case grade
        when 'A'
            puts "Hell Yeah!"
            someotherfunction
        When 'D'
            puts "run"
        else
            puts "go to fast food delievery"
    }

> Ternary Operator
    > similar to C/C++ "?" command, but I am not that much interested
- I am getting sleepy, a lot I will end this session early on 3 PM 2:00Pm
- Okay, I am going to commit, push and sleep 2:53PM
==========================================================================================
Day 4 - Today I will finish (inshallah) basic ruby chapter
(well I did not)
> loops
    > check ruby_three.rb

> Arrays
    > similar to python lists
    > filling syntax
        > code
        {
            Array.new #-> []
            Array.new(3) #-> [nil, nil, nil]
            Array.new(3, "hello") #-> ["hello", "hello", "hello"]
            Array.new(3, Array.new) #-> [[], [], []] #I liked this one
        }
    > accessing elements
        > <array_number>[<index_number>]
        > code
        {
            str_array = ["hussein", "ali", "allaw"]

            str_array.first #-> "hussein"
            str_array.first(2) #-> ["hussien", "ali"]
            str_array.last(2) #-> ["ali", "allaw"]
        }
    > adding or removing elements
        > check day 2
    > concating
        > a.concat(b)
        > a+b
    > array methods
        > [].empty? #-> true
        > [[]].empty? #-> true 
        > [1, 2, 3].reverse #-> [3, 2, 1]
        > [1, 2, 3].include(3) #-> true
        > [1, 2, 3].include(4) #-> true

        > [1, 2, 3].join #-> "123"
        > [1, 2, 3].join("-") #-> "1-2-3"
    
> Hashes
    > basicly a python dictionary
    > creating hashes
        > code
        {
            my_hash = {
                "my name" => "hussein",
                "my average" => 70,
                "quran suraa" => ["al-bakara", "Al-Omran"]
            }
        }
    > further more check "ruby_three_hashes.rb"
    > changing data
        > simple as reassigning them
    > Adding data
        > or to define a new value use "your_hash["nwe key-value"] = "your new data""
    > Removing data
        > "your_hash.delete("key-value")
        > code
        {
            shoes = {
                "summer" => "sandals",
                "winter" => "boots",
                "fall" => "sneakers"
            }
            shoes.delete("summer") #=> "snadals"
            shoes #=> {"winter" => "boots", "fall" => "sneakers"}
        }

        > Methods 
            > code
            {
                books = {
                    "adab al salat" => "panahian"
                    "insan beomr 250 aam" => "al-sayed el-kaed"
                }
                books.keys #=> ["adab el salat", "insan beomr 250 aam"]
                books.values #=> ["panahian", "al-sayed el-kaed"]
            }
        > Merging two hashes
            > "hash1.merge(hash2)"
            > be aware that for same keys, the value of hash2 is taken only
        > Symbols as hash keys
            > code
            {
                american_aircrafts = { #Rocket syntax
                    :gruman => "F14"
                    :McDouglas => "F16"
                    :LockHeed => "F22"
                }

                american_helicopters = { #Symbols syntax
                    comp1: "osprey"
                    comp2: "apache"
                    comp2: "chinook"
                }
            }
            > however you can not use them to access the hash
    > https://launchschool.com/books/ruby/read/hashes "launchschool hash guide
        > this will be done mainly in irb only
        > iterating over hashes
            > code
            {
                # iterating_over_hashes.rb
                person = {name: 'bob', height: '6 ft', weight: '160 lbs', hair: 'brown'}
                person.each do |key, value|
                    puts "Bob's #{key} is #{value}"
                end
            }
        > when passing them as paremeters, hashes can be defined as optional, which is great
            > code
            {
                # optional_parameters.rb

                def greeting(name, options = {})
                if options.empty?
                    puts "Hi, my name is #{name}"
                else
                    puts "Hi, my name is #{name} and I'm #{options[:age]}" +
                        " years old and I live in #{options[:city]}."
                end
                end

                greeting("Bob")
                greeting("Bob", {age: 62, city: "New York City"})
            }
        > hashes vs. Arrays
            > hashes help labeling
            > arrays help order things
            > array help fifo or lifo
        > hashes key data type
            > put it simple it can be anythings
        > "has_key?"
            > to check if a key is available
        > "select"
            > "<hash_name>.select{ |k, v| k == <some_key_value>}
            > "<hash_name>.select{ |k, v| (k == "Bob") || (v == 19)}
        > fetch
            > similar to normal access <hash_name>[:<key_value>], but does not return "nil" when not found
        > to_a
            > return array version of a hash
        > keys & values
            > <hash_name>.keys #=> return keys as array
            > <hash_name>.values #=> return values as array
- A website I will do nearly
    - similar to "tesla cars" as front-end
    - hosting on raspberry pain
    - appling embbeded programming to send messages
    - create another web app to print google location URL as QR code
    - create data collector for further data analysis

=============================================================================================
Day 5 - Today I will Try to finish these basics
> Methods
    > come on they are functions only
    > well they are not, since they are object-related
    > ruby methods are constructed as python
    > they tell me they are not functions but then use them as function
        > code
        {
            def para(name)
                #some code logic
            end

            para("see called as a fucntion")
        }
    > oooooh, great stuff, default parameters 
        > code
        {
            def para (name = "string")
                #code logic
            end
        }
    > ruby supports implicit return
        > it does not require "return" statement, it will auto return last-evaluated statement
    > some built-in methods
        > strings
            > .join("<joining thing>")
            > .reverse() 
                > reverse the order of list
            > .capitilize()
                > capitilizes the first letter of every word
            > .downcase
        > numbers
            > .even?
            > .odd?
            > .between?(<number_1>, <number_2>)
    > methods can be called without paranthesis, if the do not require arguments

> Basic Enumerable Methods
    > built-in methods as arrays and hashes (what is a hash?)
    > they use curly brackets
    > #select
        > code without select
        {
            friends = ['Sharon', 'Leo', 'Leila', 'Brian', 'Arun']
            invited_list = []

            for friend in friends do
                if friend != 'Brian'
                invited_list.push(friend)
                end
            end

            invited_list #=> ["Sharon", "Leo", "Leila", "Arun"]
        }
        > code with #select
        {
            friends = ["ali", "mohammad", "hussein", "jafaar"]

            friends.select { |friend| friend != "hussein"}
        }
        > searching geeksforgeeks
            > the #select will return the elements satifying the given condition
    > what the hell is "|friend|"
        > it is an iterator
        > some methods like #each iterate through arrays, so |variable| server as the element the method is currently at
    > #each
        > #select returns a new list satifying the condition, however #each will not, unless programmed to so
        > it is hashes freindly
        > "array.each{|variable| <some_code>}
        or
        > code
        {
            array.each do |variable|
                <some code>
            end
        }
        > #each_with_index
            > of course similar to #each
            > instead of only iterating through objects, it keeps track of their index 
            > "list.each_with_index { |variable, index| puts variable if index.even?}
    > #map
        > it is the destructive version of #each
        > oh it is called #collect 
        > "list.map { |variable| variable.<method>}
    > #inject
        > it turns this
        {
            my_numbers = [5, 6, 7, 8]
            sum = 0

            my_numbers.each { |number| sum += number }

            sum
        }
        into this
        {
            my_numbers = [5, 6, 7, 8]

            my_numbers.reduce { |sum, number| sum + number }
        }
        > "my_numbers.reduce(<initial_value>) { |sum, number| sum + number}
        > I skipped the rest (which are litte)

> Predicate Enumerable Methods
    > what recognize it from normal enumerable is the boolian return
    > they end by "?"
    > #include?
        > "<list>.include?(<target_value>)
    > #any?
        > return true if there exits an element in list which match the stated condition
        > "<list>.any? { |variable| <condition>}"
    > #all?
        > instead of some elements like in #any?, it is all the elements
        > "<list>.all? { |variable| <condition>}"
    > #none?
        > oppesite of #all?
        > "<list>.none? { |variable| <condition}"

> Debugging
    > use "p" as it is "puts & #inspect"
    > "#map" is not destructive, "#map!" is destructive
    > using "pry"
        > require 'pry'
        > to form a break-point use "binding.pry"
            > this will display variables